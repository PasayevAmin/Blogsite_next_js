import { PrismaClient } from "@/generated/prisma";
import path from "path";
import fs from "fs/promises";

const prisma = new PrismaClient();

export async function GET(
  request: Request,
  context: { params: Promise<{ postId: string }> }
) {
  const { postId: postIdParam } = await context.params;
  const postId = parseInt(postIdParam, 10);
  if (isNaN(postId) || postId <= 0) {
    return new Response(
      JSON.stringify({ error: "Invalid post" }),
      { status: 400, headers: { "Content-Type": "application/json" } }
    );
  }

  try {
    const userPost = await prisma.post.findFirstOrThrow({
      where: { id: postId },
      include: {
        tags: true,
        comments: {
          include: {
            replies: true, // üí° replies-i daxil et
          },
        },

        likes: true,
        saved: true,
        author: {
          select: { id: true, username: true, image: true },
        },
      },
    });

    return new Response(
      JSON.stringify({ posts: userPost }),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Failed to fetch user posts:", error);
    return new Response(
      JSON.stringify({ error: "Failed to fetch user posts" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}
export async function DELETE(
  request: Request,
  context:  { params: Promise<{ postId: string }> } // Context params Promise olaraq g…ôlmir, birba≈üa obyektdir
) {
  const { postId: postIdParam } = await context.params;
  const postId = parseInt(postIdParam, 10);

  if (isNaN(postId) || postId <= 0) {
    return new Response(
      JSON.stringify({ error: "Yanlƒ±≈ü post ID" }),
      { status: 400, headers: { "Content-Type": "application/json" } }
    );
  }

  try {
    // 1. Postu veril…ônl…ôr bazasƒ±ndan silm…ôzd…ôn …ôvv…ôl ≈ü…ôklin yolunu g√∂t√ºr√ºn
    const postToDelete = await prisma.post.findUnique({
      where: { id: postId },
      select: { image: true }, // Yalnƒ±z 'image' x√ºsusiyy…ôtini se√ßirik
    });

    if (!postToDelete) {
      return new Response(
        JSON.stringify({ error: "Post tapƒ±lmadƒ±" }),
        { status: 404, headers: { "Content-Type": "application/json" } }
      );
    }

    const imageFileName = postToDelete.image;

    // 2. ∆èg…ôr postun ≈ü…ôkli varsa, onu fayl sistemind…ôn silin
    if (imageFileName) {
      // ≈û…ôkil faylƒ±nƒ±n tam yolunu qurun
      // process.cwd() t…ôtbiqin k√∂k qovluƒüunu verir
      const imagePath = path.join(process.cwd(), 'public', 'blog', imageFileName);

      try {
        await fs.unlink(imagePath); // ≈û…ôkli asinxron olaraq silin
        console.log(`≈û…ôkil silindi: ${imagePath}`);
      } catch (fileError: any) {
        // ≈û…ôkil silin…ôrk…ôn x…ôta ba≈ü ver…ôrs…ô (m…ôs…ôl…ôn, fayl tapƒ±lmazsa)
        // Bu x…ôta postun silinm…ôsin…ô mane olmamalƒ±dƒ±r
        if (fileError.code === 'ENOENT') {
          console.warn(`≈û…ôkil tapƒ±lmadƒ±, lakin post silin…ôc…ôk: ${imagePath}`);
        } else {
          console.error(`≈û…ôkil silin…ôrk…ôn x…ôta ba≈ü verdi: ${imagePath}`, fileError);
          // H…ôqiqi bir fayl sistemi x…ôtasƒ± olarsa, postu silm…ôzd…ôn …ôvv…ôl x…ôta qaytara bil…ôrsiniz
          // Lakin ad…ôt…ôn, faylƒ±n silinm…ôsi uƒüursuz olsa bel…ô, veril…ônl…ôr bazasƒ± …ôm…ôliyyatƒ± davam etdirilir
          // Bu, sizin t…ôtbiqinizin t…ôl…ôbl…ôrin…ô baƒülƒ±dƒ±r.
          // return new Response(
          //   JSON.stringify({ error: `≈û…ôkil silin…ôrk…ôn x…ôta: ${fileError.message}` }),
          //   { status: 500, headers: { "Content-Type": "application/json" } }
          // );
        }
      }
    }

    // 3. ≈û…ôkil uƒüurla silindikd…ôn (v…ô ya he√ß olmadƒ±qda/x…ôta ba≈ü verdikd…ô bel…ô davam etdikd…ô) postu silin
    const deletedPost = await prisma.post.delete({
      where: { id: postId },
    });

    return new Response(
      JSON.stringify({ message: "Post uƒüurla silindi", post: deletedPost }),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("Post silin…ôrk…ôn daxili x…ôta:", error);
    return new Response(
      JSON.stringify({ error: "Post silin…ôrk…ôn daxili server x…ôtasƒ±" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}