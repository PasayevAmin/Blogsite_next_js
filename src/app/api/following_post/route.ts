// app/api/followed-posts/route.ts
import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@/generated/prisma";

const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
  try {
    const { userId } = await req.json();

    if (!userId) {
      return NextResponse.json({ error: "User ID yoxdur" }, { status: 400 });
    }

    // ƒ∞stifad…ô√ßinin follow etdiyi user-larƒ±n ID-l…ôrini alƒ±rƒ±q
    const followingUsers = await prisma.follower.findMany({
      where: { followerId: userId },
      select: { followingId: true },
    });

    // Tip t…ôyini
    const followingIds = followingUsers.map((f: { followingId: number }) => f.followingId);

    // ∆èg…ôr he√ß kimi follow etm…ôyibs…ô, bo≈ü qaytar
    if (followingIds.length === 0) {
      return NextResponse.json({ posts: [] });
    }

    // H…ômin user-l…ôrin postlarƒ±nƒ± g…ôtir
    const posts = await prisma.post.findMany({
      where: {
        authorId: {
          in: [...followingIds, userId],
        },
      },
      include: {
        author: {
          select: {
            id: true,
            username: true,
          },
        },
        tags: true,
        likes: true,
        comments: {
          include: {
            replies: true, // üí° replies-i daxil et
          },
        },

      },
      orderBy: {
        createdAt: "desc",
      },
    });


    return NextResponse.json({ posts });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: "X…ôta ba≈ü verdi" }, { status: 500 });
  }
}
