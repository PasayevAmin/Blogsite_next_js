generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user     @relation(fields: [authorId], references: [id], map: "Comment_authorId_fkey")
  post      post     @relation(fields: [postId], references: [id], map: "Comment_postId_fkey")
  reply     reply[]

  @@index([authorId], map: "Comment_authorId_fkey")
  @@index([postId], map: "Comment_postId_fkey")
}

model follower {
  id                              Int      @id @default(autoincrement())
  followerId                      Int
  followingId                     Int
  createdAt                       DateTime @default(now())
  user_follower_followerIdTouser  user     @relation("follower_followerIdTouser", fields: [followerId], references: [id], map: "Follower_followerId_fkey")
  user_follower_followingIdTouser user     @relation("follower_followingIdTouser", fields: [followingId], references: [id], map: "Follower_followingId_fkey")

  @@unique([followerId, followingId], map: "Follower_followerId_followingId_key")
  @@index([followingId], map: "Follower_followingId_fkey")
}

model like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  post      post     @relation(fields: [postId], references: [id], map: "Like_postId_fkey")
  user      user     @relation(fields: [userId], references: [id], map: "Like_userId_fkey")

  @@unique([userId, postId], map: "Like_userId_postId_key")
  @@index([postId], map: "Like_postId_fkey")
}

model post {
  id        Int         @id @default(autoincrement())
  title     String
  path      String?
  image     String?
  content   String?     @db.LongText
  authorId  Int
  views     Int         @default(0)
  type      post_type
  createdAt DateTime    @default(now())
  updatedAt DateTime
  comment   comment[]
  like      like[]
  user      user        @relation(fields: [authorId], references: [id], map: "Post_authorId_fkey")
  savedpost savedpost[]
  tag       tag[]       @relation("posttags")

  @@index([authorId], map: "Post_authorId_fkey")
}

model reply {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user     @relation(fields: [authorId], references: [id], map: "Reply_authorId_fkey")
  comment   comment  @relation(fields: [commentId], references: [id], map: "Reply_commentId_fkey")

  @@index([authorId], map: "Reply_authorId_fkey")
  @@index([commentId], map: "Reply_commentId_fkey")
}

model savedpost {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  post      post     @relation(fields: [postId], references: [id], map: "SavedPost_postId_fkey")
  user      user     @relation(fields: [userId], references: [id], map: "SavedPost_userId_fkey")

  @@index([postId], map: "SavedPost_postId_fkey")
  @@index([userId], map: "SavedPost_userId_fkey")
}

model tag {
  id          Int    @id @default(autoincrement())
  label       String
  value       String
  description String
  color       String
  post        post[] @relation("posttags")
}

model user {
  id                                  Int         @id @default(autoincrement())
  name                                String
  username                            String      @unique(map: "User_username_key")
  email                               String      @unique(map: "User_email_key")
  password                            String
  bio                                 String?     @default("")
  site                                String      @default("")
  coverImage                          String
  createdAt                           DateTime    @default(now())
  image                               String?     @default("")
  isActive                            Boolean     @default(true)
  isBanned                            Boolean     @default(false)
  isDeleted                           Boolean     @default(false)
  isVerified                          Boolean     @default(false)
  role                                user_role   @default(USER)
  surname                             String
  updatedAt                           DateTime
  age                                 Int
  comment                             comment[]
  follower_follower_followerIdTouser  follower[]  @relation("follower_followerIdTouser")
  follower_follower_followingIdTouser follower[]  @relation("follower_followingIdTouser")
  like                                like[]
  post                                post[]
  reply                               reply[]
  savedpost                           savedpost[]
}

enum post_type {
  DRAFT
  PUBLISHED
}

enum user_role {
  USER
  ADMIN
  MODERATOR
}
