generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   directUrl   = env("Direct_URL")
// }
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  surname     String
  username    String      @unique
  email       String      @unique
  password    String
  age         Int
  bio         String?     @default("")
  site        String      @default("")
  posts       Post[]      @relation("UserPosts")
  comments    Comment[]   @relation("UserComments")
  replies     Reply[]     @relation("UserReplies")
  saved       SavedPost[] @relation("UserSavedPosts")
  likes       Like[]      @relation("UserLikes")
  role        UserRole    @default(USER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  image       String?     @default("")
  coverImage  String      @default("")
  isVerified  Boolean     @default(false)
  isActive    Boolean     @default(true)
  isBanned    Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  followers   Follower[]  @relation("FollowRelation_following")
  following   Follower[]  @relation("FollowRelation_follower")
}

model Post {
  id        Int         @id @default(autoincrement())
  title     String
  path      String?
  image     String?
  content   Json?
  author    User        @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  tags      Tag[]       @relation("PostTags")
  comments  Comment[]   @relation("PostComments")
  views     Int         @default(0)
  type      PostType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  saved     SavedPost[]
  likes     Like[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  author    User      @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  post      Post      @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  replies   Reply[]
}

model Like {
  id        Int       @id @default(autoincrement())
  user      User      @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime  @default(now())

  @@unique([userId, postId])
}

model SavedPost {
  id        Int       @id @default(autoincrement())
  user      User      @relation("UserSavedPosts", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime  @default(now())
}

model Reply {
  id        Int       @id @default(autoincrement())
  content   String
  author    User      @relation("UserReplies", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tag {
  id          Int      @id @default(autoincrement())
  label       String
  value       String
  description String
  color       String
  posts       Post[]   @relation("PostTags")
}

model Follower {
  id          Int       @id @default(autoincrement())
  follower    User      @relation("FollowRelation_follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User      @relation("FollowRelation_following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt   DateTime  @default(now())

  @@unique([followerId, followingId])
}

enum PostType {
  DRAFT
  PUBLISHED
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
